Class {
	#name : #MASlangTranslator,
	#superclass : #FATranslator,
	#category : #'MAngler-Slang-Translation'
}

{ #category : #'default-configuration' }
MASlangTranslator class >> classTranslatorClass [
	^ MASlangVMClassTranslator 
]

{ #category : #'default-configuration' }
MASlangTranslator class >> generate: aClassName outputDirectory: aDirectory [
	"prototype, stuff are currently hard coded."
	self flag: #hack.
	self new generateVM
]

{ #category : #'special selectors' }
MASlangTranslator class >> isSpecialSelector: aString [ 
	
	^ MASlangReceiver slangReservedSelector includes: aString
]

{ #category : #'default-configuration' }
MASlangTranslator class >> prettyPrinterClass [

	^ MASlangPrettyPrinter 
]

{ #category : #'default-configuration' }
MASlangTranslator class >> programClass [
	^ MASlangProgram
]

{ #category : #asserting }
MASlangTranslator class >> shouldITranslate: aMethod [ 
	^ ((aMethod methodClass inheritsFrom: VMStructType) 
		==> [	self shouldTranslateStructMethod: aMethod ])
		and: [ aMethod isSubclassResponsibility not
			and: [ (aMethod hasPragmaNamed: #doNotGenerate) not
				and: [ aMethod selector ~~ #initialize ]]].
			
		
	"and isMacro not. ->  they should be"
	"and: [ (MAFullVMCCodeGeneratorRessource current codeGenerator"

]

{ #category : #asserting }
MASlangTranslator class >> shouldTranslateStructMethod: aMethod [
	^ (aMethod methodClass isAccessor: aMethod selector) not
]

{ #category : #'translation-api' }
MASlangTranslator >> generateVM [
	"Shortcut, since the VM is the base program for this translator"
	self generateVMCCode.
	self generateVMHeader.
	self generateVMCallBackHeader.
]

{ #category : #'translation-api' }
MASlangTranslator >> generateVMCCode [
	| translation |
	translation := self translateProgram.

"	(FACollectIdsDeclaredInScope collectFrom: translation) 
		select: [ :a| a value size > 1 
			and: [ a value anySatisfy:[ :aNode | aNode isFunctionDeclaration ]]].
"
	^ FANewFilePrinter new
		directory: './generated/vm/src/';
		fileName: 'gcc3x-interp.c';
		compilationUnit: translation;
		prettyPrinter: self class prettyPrinterClass new;
		printInFile;
		yourself
]

{ #category : #'translation-api' }
MASlangTranslator >> generateVMCallBackHeader [
	^ FANewFilePrinter new
		directory: './generated/vm/include/';
		fileName: 'vmCallback.h';
		printStringInFile: self vmCallbackHeader;
		yourself
]

{ #category : #'translation-api' }
MASlangTranslator >> generateVMHeader [
	^ FANewFilePrinter new
		directory: './generated/vm/include/';
		fileName: 'interp.h';
		printStringInFile: self interpretHeader;
		yourself
]

{ #category : #initialization }
MASlangTranslator >> getReplacementType: aCType [
	"Virtual machine is a structure used exclusively in generated code, and has no Smalltalk equivalent (that I know of)"
	^ ((aCType isStruct and: [ (aCType type = #VirtualMachine) not ])
		ifTrue:[ aCType pharoType: (program structNamed: aCType type).
			MASlangStructsReceiver new ]
		ifFalse:[ MASlangReceiver new ]) 
			type: aCType ; yourself.
]

{ #category : #accesors }
MASlangTranslator >> inferer [
	^ inferer
]

{ #category : #'translation-api' }
MASlangTranslator >> initialize [
	super initialize.
	inferer := CCodeGeneratorGlobalStructure new
]

{ #category : #'translation-api' }
MASlangTranslator >> interpretHeader [
	^'
/* Automatically generated by
	CCodeGeneratorGlobalStructure * VMMaker-tonel.1 uuid: 3a99d191-ef60-0d00-bab9-f6650264eacd
 */

#define VM_PROXY_MAJOR 1
#define VM_PROXY_MINOR 15

#define SQ_VI_BYTES_PER_WORD 8

#define BaseHeaderSize 8
#define BytesPerOop 8
#define BytesPerWord 8

#define PrimErrGenericFailure 1
#define PrimErrBadReceiver 2
#define PrimErrBadArgument 3
#define PrimErrBadIndex 4
#define PrimErrBadNumArgs 5
#define PrimErrInappropriate 6
#define PrimErrUnsupported 7
#define PrimErrNoModification 8
#define PrimErrNoMemory 9
#define PrimErrNoCMemory 10
#define PrimErrNotFound 11
#define PrimErrBadMethod 12
#define PrimErrNamedInternal 13
#define PrimErrObjectMayMove 14
#define PrimErrLimitExceeded 15
#define PrimErrObjectIsPinned 16
#define PrimErrWritePastObject 17
#define PrimErrObjectMoved 18
#define PrimErrObjectNotPinned 19
#define PrimErrCallbackError 20
#define PrimErrOSError 21
#define PrimErrFFIException 22
#define PrimErrNeedCompaction 23
#define PrimErrOperationFailed 24

#define MinSmallInteger -1152921504606846976
#define MaxSmallInteger 1152921504606846975
#define NumSmallIntegerTagBits 3

#define MULTIPLEBYTECODESETS 1
#if !defined(IMMUTABILITY) /* Allow this to be overridden on the compiler command line */
# define IMMUTABILITY 1
#endif

#define STACKVM 1
#define SPURVM 1
#define DisownVMLockOutFullGC 8
#define DisownVMForFFICall 16
#define DisownVMForThreading 32'
]

{ #category : #testing }
MASlangTranslator >> isGlobalInstanceVariable: aString [ 
	
	^ (inferer globalsAsSet includes: aString)
		and: [ inferer placeInStructure: aString ]
]

{ #category : #visiting }
MASlangTranslator >> preTranslationAnnotators [
	"should return a collection of visitors for RBAST which will annotate a method AST"
	^ {
		MASlangMethodCleaner new. "not technically an annotator, but requires to be applied first currently. this will change when acceptMultipleVisitor: will be done properly"
		MASlangSuperAnnotator new classTranslator: self ; yourself.
		MASlangRequiredInliningMethodTagger new program: program ; yourself.
		MASlangTypeAnnotator new inferer: inferer ; yourself. "always take the latest inferer"
		MASlangDeclarationAnnotator new "this is required to be after the typeAnnotator. see its documention"
		}
]

{ #category : #accessing }
MASlangTranslator >> preTranslationTransformations [
	^ { 
		"MAGlobalStructureAccessTransformer translator: self."
		MASlangMinimalInliner translator: self
	}
]

{ #category : #preparation }
MASlangTranslator >> prepareProgram [
	
	program prepareWithInferer: inferer inTranslator: self.
]

{ #category : #'translation-api' }
MASlangTranslator >> prettyPrinterClass [

	^ self classTranslator prettyPrinterClass
]

{ #category : #'translation-api' }
MASlangTranslator >> translateProgram [
	| cu |
	
	self prepareProgram.
	cu := ASTCCompilationUnit new.
	
	cu preamble: (ASTCRawCCode new cCode: program interpreterClass preambleCCode).
	
	program includes collect: [ :anInclude | ASTCPreprocessorInclude new name: anInclude; yourself ] into: cu.
	program structClassesToGenerate collect: [ :aClass | classTranslator translateClassState: aClass  ] into: cu.

	program slots collect: [ :aSlot | classTranslator translateSlot: aSlot ] into: cu.
	(program methods 
		reject: [ :aMethod | aMethod isAccessor ]) 
			collect: [ :aMethod | classTranslator methodTranslator translateMethod: aMethod ] into: cu.
	
	^ cu
]

{ #category : #'translation-api' }
MASlangTranslator >> vmCallbackHeader [
	^ '/* Automatically generated by
	CCodeGeneratorGlobalStructure * VMMaker-tonel.1 uuid: 3a99d191-ef60-0d00-bab9-f6650264eacd
 */

#define VM_CALLBACK_INC 1

typedef struct _VMCallbackContext {
	void *thunkp;
	sqIntptr_t *stackp;
	sqIntptr_t *intregargsp;
	double *floatregargsp;
	void *savedCStackPointer;
	void *savedCFramePointer;
	union {
								sqIntptr_t valword;
								struct { int low, high; } valleint64;
								struct { int high, low; } valbeint64;
								double valflt64;
								struct { void *addr; sqIntptr_t size; } valstruct;
							}	rvs;
	void *savedPrimFunctionPointer;
	jmp_buf	trampoline;
	jmp_buf	savedReenterInterpreter;
 } VMCallbackContext;

/* The callback return type codes */
#define retword 1
#define retword64 2
#define retdouble 3
#define retstruct 4'
]
